### 1
### Integers in Range of X,Y
You are given an array of integers and an array containing a range of integers (in the form of \[X, Y]) as arguments. Return an array containing all of the elements from the array of integers that are contained in the range.

X will always be a smaller number than Y.

There will always be at least one integer from the array found the X,Y range.

Requirements
Must return an array of integers
Must work with both positive and negative integers
Example #1
solve([1,2,3,5,6,7], [2,6])
> [3, 5]
Example #2
solve([1,2,3,4,5,10,20], [4,7])
> [5]

Solution: 

const solve = (intArray, range) => intArray.slice(range[0], range[1] - 1);

### 2
### You are given an array of integers and an integer N as arguments. Return the number in the array at the index of Integer N.

Integer N will never be more than the length of the argument array - 1.

Requirements
Must return an integer
Example #1
solve([20, 30, 40], 0)
> 20
Example #2
solve([3, 0, -1, 8], 2)
> -1

Solution: 

const solve = (intArray, n) => intArray[n];

### 3
### Sum of Strings
Find the sum of two integers represented as strings.

For example, given the string "123" and the string "111", your code should return the string "234".

Examples
First Argument	Second Argument	Expected Output
"10"	"20"	"30"
"48"	"2"	"50"
"-500"	"500"	"0"
"987"	"23"	"1000"
"36"	"23"	"59"

Solution:

const solve = (strOne, strTwo) => Number(strOne) + Number(strTwo);

### 4
### Arrays of Integers
You are given two arrays of integers as arguments. Return true if they contain the exact same elements in any order.

Requirements
Must return either true or false
Must account for negative integers
Example #1
solve([1,2,7],[7,1,2])
> true
Example #2
solve([5,7],[7,1])
> false
Example #3
solve([5,-7],[-7,5])
> true

Solution:

const solve = (arrOne, arrTwo) => arrOne.length === arrTwo.length ? arrOne.every( x => arrTwo.includes(x)) : false;

### 5
### Pairs of Integers
You are given two sorted arrays of integers and an integer K as arguments. Find one integer from each array that sums up to the integer K and return the pair as an array of integers.

Requirements
Must return an array of two integers
Example #1
solve([1,2,3], [4,5,6], 8)
> [2, 6]
Example #2
solve([1,2,3], [4,5,6], 9)
> [3, 6]

Solution: 

const solve = (arrayOne, arrayTwo, k) => {
  for (let x of arrayOne) {
    for (let y of arrayTwo) {
      if ( x + y === k ) {
        return [x, y]
      } 
    }
  }
}

### 6
### Create a Multiplication Table
You are given an integer N as an argument. Return a two dimensional array containing arrays of integers that make up a multiplication table from 1x1 to NxN.

The top left element must be zero.

Requirements
Must return a two dimensional array containing arrays of integers
Example #1
solve(4)
>  [[1, 2, 3, 4],
    [2, 4, 6, 8],
    [3, 6, 9, 12],
    [4, 8, 12, 16]]
    
Solution:

const solve = (n) => {
  const result = [];
  for ( let i = 1; i <= n; i++ ) {
    const row = [];
    for (let j = 1; j <= n; j++) {
      row.push(i * j);
    }
    result.push(row);
  }
  return result;
};

### 7
### Intersection of an Array
You are given two arrays of integers as arguments. Return an array of integers which represents the intersection - the common elements from the original two arrays.

Requirements
Must return an array of integers
The returned array must follow the same ordering as the first array.
Should work with both positive and negative integers
Example #1
solve([1, 2, 3, 4, 5], [4,2])
> [2,4]
Example #2
solve([2,5,6,9,13,1], [1,6,13,7])
> [6,13,1]
Example #3
solve([1, -2, 3, -4, 5], [-4,-2])
> [-2,-4]

Solution:

const solve = (arrOne, arrTwo) => arrOne.filter(x => arrTwo.includes(x));

### 8
### Merging Sorted Array of Integers
You are given two sorted arrays of integers as arguments. Return a new array combining elements from both arrays in sorted order.

There will never be duplicate integers in either array.

Requirements
Must return an array of integers
Should work with both positive and negative integers
Example #1
solve([1, 10, 20], [2, 3, 15])
> [1,2,3,10,15,20]
Example #2
solve([-1, 0, 5], [-2, 3, 15])
> [-2,-1,0,3,5,15]

Solution:

const solve = (arrOne, arrTwo) => [...arrOne, ...arrTwo].sort(( x, y ) => x - y);

### 9
### Character Appears Even Number of Times
You are given a lowercase string as an argument. Return true if each character in the string is shown an even number of times, false if not.

Requirements
Must return either true or false
Example #1
solve("aabbccdd")
> true

All characters are seen twice, an even numbered of times, so we return true.

Example #2
solve("abcdeffgg")
> false

a,b,c,d and e are seen only once, an odd numbers times, so we return false.

Solution:

const solve = (strArg) => {
  let map = new Map();
  for (let x of strArg) {
    map[x] ? map[x]++ : map[x] = 1
  }
  return Object.values(map).every(y => y % 2 === 0);
}

### 10
### Array of Strings Without Special Characters
You are given a string representing a sentence as an argument. Return an array with each word from the string as separate string element, removing any special characters, punctuation or spaces.

Requirements
Must return an array of strings
The original upper or lower casing should be maintained
Example #1
solve("Hi, how are you; I was quite curious!")
> ["Hi", "how", "are", "you", "I", "was", "quite", "curious"]
Example #2
solve("Hello!!! The- sun- is- shining?")
> ["Hello", "The", "sun", "is", "shining"]

Solution:

const solve = (strArg) => strArg.replace(/[,.!?;:'-]/g, '').split(' ').filter(x => x.length !== 0)

### 11
### Find the Most Frequently Occurring Character
You are given a string and integer K as arguments. Return the Kth most frequently occurring character.

Requirements
Must return a single character string
Example #1
solve("aaabbc", 2)
> "b"
Example #2
solve("bbbbxyyzzz", 3)
> "y"

Solution:

const solve = (strArg, k) => strArg.split('').sort().filter(( x, y ) => x !== strArg.split('').sort()[y + 1])[k - 1];


### 12
### Strings of Anagrams
You are given an array containing multiple single word strings as an argument. Return true if they are all anagrams of each other.

An anagram is a word made by rearranging the letters of a different word, using all the letters exactly once.

Consider upper and lower case characters the same.

Requirements
Must return true or false
Should be able to handle both upper and lowercase letters
Example #1
solve(["act","cat","tac"])
> true
Example #2
solve(["act","cat","garden"])
> false
Example #3
solve(["UPPERCASE", "praepuces"])
> true

Solution:

const solve = (strArray) => { 
  let sorted = strArray.map( word => word.split('').sort().join('').toLowerCase());
  return sorted.every(word => word === sorted[0])
}

### 13
### Sum Each Digit of an Integer
You are given a non-negative integer as an argument. Add each digit of the integer together and return the sum.

Requirements
Must return an integer
Example #1
solve(6368206)
> 31
Adding each digit of the integer argument 6+3+6+8+2+0+6 gives us 31.

Solution:

const solve = (intArg) => intArg.toString().split('').map(Number).reduce( ( x, y ) => x + y);

Solution #2:

const solve = (intArg) => {
  let result = 0;
  while (intArg) {
    result += intArg % 10;
    intArg = Math.floor(intArg / 10);
  }
  return result;
}

### 14
### Reverse Characters in a String
You are given a string that forms a sentence as an argument. Reverse the characters in each word, but not the words themselves. Return the resulting string.

Requirements
Must return a single string
Must handle uppercase and lowercase characters
Special characters should also be reversed.
Example #1
solve("How are you?")
> "woH era ?uoy" 

Solution:

const solve = (strArray) => strArray.split(' ').map(word => word.split('').reverse().join('')).join(' ');

### 15
### You are given an array of integers containing some duplicates as an argument. Return the first element in the array that is duplicated twice.

Requirements
Must return an integer
Must also handle negative integers
Must be able to handle cases with multiple duplicate elements
Example #1
solve([6, 2, 5, 1, 0, 12, 2])
> 2
Example #2
solve([-6, 1, 5, -6, 0, -2, 3])
> -6
Example #3
solve([3, 1, 5, 1, 0, -2, 3, 5])
> 1
The number three appears twice, but both instances of the number one appear before both instances of three, so return one.

Solution:

const solve = (intArray) => {
  let firstDuplicateIndex = intArray.findIndex(
  (x, i) => intArray.lastIndexOf(x) !== i
);
  return intArray[firstDuplicateIndex];
} 

Solution 2:

const solve = (intArray) => { 
  const arr = []; 
  for (let int of intArray) { 
    
    if (arr.includes(int)) { 
      return int; 
    } 
    arr.push(int); 
  } 
};

### 16
### Remove Duplicated Strings
You are given an array of strings containing some duplicates as an argument. Return an array without any duplicated strings.

Requirements
Must return an array of strings
Must be able to handle uppercase, lowercase and special characters
Must also work with strings of words as well as single character strings
Example #1
solve(["a","b","b","a","c","d"])
> ["a","b","c","d"]
Example #2
solve(["a","b","b","Hello!","c","goodbye", "Hello!"])
> ["a","b","Hello!","c","goodbye"]

Solution: 

const solve = (strArray) => strArray.filter( (x, y, z) => z.indexOf(x) === y)

Solution 2:

const solve = (strArray) => [...new Set(strArray)]

### 17
### You are given an unsorted array of integers as an argument. When sorted, the numbers in the array will form a sequence. One number in the sequence is missing. Return the missing number.

Requirements
Must return a single integer.
Number returned must be between the 0th and Kth index of the given array when sorted.
Must also work with negative integers
Example 1
solve([5, 0, 2, 1, 3])
> 4

Sorted, the array will be 0,1,2,3,5, The missing number in this sequence is 4

Example 2
solve([-5, 0, -2, -1, -3])
> 4

Sorted, the array will be -5, -3, -2, -1, 0, The missing number in this sequence is -4

Solution: 

const solve = (intArray) => { 
 let sorted = intArray.sort(( x, y ) => x - y);
  for (let x of sorted) {
    if (!sorted.includes(x + 1)) {
      return x + 1;
    }
  }
};

### 18
### 2D Array of Integers With Square Root Dimensions
Given an integer K, return a 2D array of integers with dimensions sqrt(K) X sqrt(K) whose elements span the sequence from 1 to K. K will always have an integer square root (so K= 4, 9, 16, 25, etc) Ex: Given 9, return [ [1, 2, 3] [4, 5, 6] [7, 8, 9] ]

Solution: 

const solve = (k) => {
  let arrayRange = [...Array(k + 1).keys()].filter(x => x !== 0);
    return arrayRange.reduce(( result, x, i) => {
      let chunkIndex = Math.floor( i / (Math.sqrt(k)))
      
      if (!result[chunkIndex]) {
        result[chunkIndex] = []
      }
      
      result[chunkIndex].push(x)
      return result;
    }, []);
};

### 19
### Find the Largest Sum
Given a list of integers and a number K, find the sequence of elements K long that results in the largest sum.

Solution:

const solve = (intArray, number) => {
  let result = [];
  for (let i = 0; i < number; i++ ) {
    result.push(intArray.filter(x => Math.max(intArray))); 
  }
  return result;
}

### 20
### Find the Character That Doesn't Belong
You are given two lowercase single word strings as arguments. The strings are identical except one has a random character inserted. Return the random inserted character.

Requirements
Must return a single character string
Example #1
solve("flooding", "floodring")
> "r"

Solution:

const removeChar = (firstWord, secondWord) => firstWord.split("").find((char, index) => secondWord.split("")[index] !== char);

const solve = (strOne, strTwo) => {  
  return strOne.length > strTwo.length
    ? removeChar(strOne, strTwo) 
    : removeChar(strTwo, strOne)
};

### 21
### Quantity of Numbers Between
You are given a non-negative integer N as an argument. Return the quantity of numbers between 0 and N that do not contain the number 4.

Requirements
Example #1
solve(25)
> 23

*There are 23 numbers between 0 and 25 (inclusive) that do not contain a 4. The numbers 4, 14 and 24 are excluded. *

Solution: 

const includesNumberFour = (element) => !element.toString().split('').every(x => x != 4 );

const solve = (n) => [...Array(n + 1).keys()].filter( x => !includesNumberFour(x)).length;

